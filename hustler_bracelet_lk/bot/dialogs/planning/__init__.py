from datetime import date, timedelta

from aiogram_dialog import Dialog, Window, DialogManager
from aiogram_dialog.widgets.kbd import Start, Cancel
from aiogram_dialog.widgets.text import Const, Jinja

from hustler_bracelet.bot.dialogs import states
from hustler_bracelet.bot.utils.lang_utils import plural_form, represent_date
from hustler_bracelet.database.task import Task
from hustler_bracelet.managers import FinanceManager


def get_planning_data_getter(*, include_other_days: bool = True):
    async def wrapped(dialog_manager: DialogManager, **kwargs):
        finance_manager: FinanceManager = dialog_manager.middleware_data['finance_manager']

        all_tasks = await finance_manager.get_active_tasks()

        tasks_for_today = [
            task for task in all_tasks if task.planned_complete_date == date.today()
        ]
        tasks_for_today_amount = len(tasks_for_today)

        tasks_for_tomorrow = [
            task for task in all_tasks if task.planned_complete_date == date.today() + timedelta(days=1)
        ]
        tasks_for_tomorrow_amount = len(tasks_for_tomorrow)

        if include_other_days:
            other_tasks_sorted = {}
            for task in all_tasks:
                if task.planned_complete_date in [date.today(), date.today() + timedelta(days=1)]:
                    continue

                if task.planned_complete_date not in other_tasks_sorted.keys():
                    other_tasks_sorted[task.planned_complete_date] = []
                other_tasks_sorted[task.planned_complete_date].append(task)

            other_tasks_sorted = dict(sorted(other_tasks_sorted.items(), key=lambda item: item[0]))
        else:
            other_tasks_sorted = {}

        other_tasks_sorted: dict[date, list[Task]]

        return {
            'tasks': {
                f'üìù {plural_form(tasks_for_today_amount, ("–∑–∞–¥–∞—á–∞", "–∑–∞–¥–∞—á–∏", "–∑–∞–¥–∞—á"))} '
                f'–Ω–∞ —Å–µ–≥–æ–¥–Ω—è': (tasks_for_today, 'üìù –ù–∞ —Å–µ–≥–æ–¥–Ω—è –Ω–µ—Ç –∑–∞–¥–∞—á'),

                f'üïê {plural_form(tasks_for_tomorrow_amount, ("–∑–∞–¥–∞—á–∞", "–∑–∞–¥–∞—á–∏", "–∑–∞–¥–∞—á"))}'
                ' –Ω–∞ –∑–∞–≤—Ç—Ä–∞'
                : (tasks_for_tomorrow, 'üïê –ù–∞ –∑–∞–≤—Ç—Ä–∞ –Ω–µ—Ç –∑–∞–¥–∞—á'),

                **{
                    f'üìÜ {plural_form(len(tasks_for_this_date), ("–∑–∞–¥–∞—á–∞", "–∑–∞–¥–∞—á–∏", "–∑–∞–¥–∞—á"))} –Ω–∞ {represent_date(date_)}': (tasks_for_this_date, '') for date_, tasks_for_this_date in other_tasks_sorted.items()
                },
            },
            'today_uncompleted_tasks_amount': await finance_manager.get_amount_of_tasks_filtered_by_planned_complete_date(
                date.today(),
                completed=False
            ),
            'tomorrow_uncompleted_tasks_amount': await finance_manager.get_amount_of_tasks_filtered_by_planned_complete_date(
                date.today() + timedelta(days=1),
                completed=False
            ),
            'uncompleted_tasks_amount': await finance_manager.get_amount_of_tasks(completed=False),
            'completed_tasks_amount': await finance_manager.get_amount_of_tasks(completed=True),
        }

    return wrapped


def get_jinja_widget_for_tasks_displaying() -> Jinja:
    return Jinja(
        '{% for category, (tasks, text_for_empty_tasks) in tasks.items() %}'
        '{% if tasks %}'
        '<b>\n{{ category }}:</b>\n'
        '{% for task in tasks %}'
        ' ‚Ä¢  {{ task.name }}\n'
        '{% endfor %}'
        '{% else %}'
        '<b>\n{{ text_for_empty_tasks }}</b>\n'
        '{% endif %}'
        '{% endfor %}'
    )


planning_main_menu_dialog = Dialog(
    Window(
        Const(
            '‚úÖ <b>–ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ</b>'
        ),
        get_jinja_widget_for_tasks_displaying(),
        Jinja(
            '{% if uncompleted_tasks_amount > 0 %}\n'
            'üí™ –£ —Ç–µ–±—è {{ uncompleted_tasks_amount|plural(["–∑–∞–¥–∞—á–∞", "–∑–∞–¥–∞—á–∏", "–∑–∞–¥–∞—á"]) }} –∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—é. –ü–æ–≤–æ—Ä–∫–∞–µ–º?\n'
            '{% endif %}\n'
            '{% if completed_tasks_amount > 0 %}\n'
            'üìä –¢—ã –∑–∞–∫—Ä—ã–ª —É–∂–µ {{ completed_tasks_amount|plural(["–∑–∞–¥–∞—á—É", "–∑–∞–¥–∞—á–∏", "–∑–∞–¥–∞—á"]) }}. –ù–µ–ø–ª–æ—Ö–æ!\n'
            '{% endif %}'
        ),
        Start(
            text=Const('‚ûï –î–æ–±–∞–≤–∏—Ç—å –∑–∞–¥–∞—á—É'),
            id='add_task',
            state=states.AddTask.MAIN
        ),
        Start(
            text=Const('‚úÖ –í—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞—á–∏'),
            id='complete_some_tasks',
            state=states.CompleteSomeTasks.MAIN
        ),
        Cancel(Const('‚ùå –û—Ç–º–µ–Ω–∞')),
        state=states.Planning.MAIN,
        getter=get_planning_data_getter()
    )
)
