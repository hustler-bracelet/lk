import asyncio
import logging

import aiogram_dialog
from aiogram import Bot, Dispatcher, F, Router, types
from aiogram.enums import ParseMode
from aiogram.exceptions import TelegramBadRequest
from aiogram.filters import ExceptionTypeFilter
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import ErrorEvent, Message, ReplyKeyboardRemove, LabeledPrice, InlineKeyboardMarkup, \
    InlineKeyboardButton
from aiogram_dialog import DialogManager, setup_dialogs, ShowMode, StartMode
from aiogram_dialog.api.exceptions import UnknownIntent
from aiogram_dialog.widgets.text import setup_jinja

import config
from .dialogs import states


async def start(message: Message, dialog_manager: DialogManager):
    await message.bot.send_invoice(
        chat_id=message.chat.id,
        title='HUSTLER BRACELET - 1 –º–µ—Å—è—Ü –ø–æ–¥–ø–∏—Å–∫–∏',
        description="""‚åöüëàüèª HUSTLER BRACELET ‚Äî –ø—Ä–æ–¥—É–∫—Ç, –º–µ–Ω—è—é—â–∏–π –±—É–¥—É—â–µ–µ. 

–ü–æ–ª—É—á–∏ –¥–æ—Å—Ç—É–ø –∫ —Ç–æ–Ω–Ω–∞–º –æ–±—É—á–∞–ª–æ–∫ –ø–æ –≤—Å–µ–º –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è–º, —Ä–∞–±–æ—Ç–µ –¥–ª—è –ª—é–±–æ–π –Ω–∏—à–∏, —Å–æ–∑–≤–æ–Ω–∞–º –∏ –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º —Ä–∞–∑–±–æ—Ä–∞–º –∫–µ–π—Å–æ–≤, –ø—Ä–æ–≥—Ä–∞–º–º–∞–º —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å–∏—Å—Ç–µ–º–µ, –±–æ—Ç—É –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∏ —Å–∏—Å—Ç–µ–º–∞—Ç–∏–∑–∞—Ü–∏–∏ —Å–≤–æ–∏—Ö –¥–≤–∏–∂–µ–Ω–∏–π, –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—è–º —Å –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º–∏ –≤—ã–ø–ª–∞—Ç–∞–º–∏ ‚Äî –∏ –≥–æ—Ä–∞–∑–¥–æ –±–æ–ª—å—à–µ–º—É...

–ü—Ä–æ—Ü–µ–Ω—Ç —Å –∫–∞–∂–¥–æ–π –æ–ø–ª–∞—Ç—ã –µ–∂–µ–º–µ—Å—è—á–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ –±–ª–∞–≥–æ—Ç–≤–æ—Ä–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å.""",
        payload='payload',
        provider_token='381764678:TEST:85741',
        currency='RUB',
        prices=[LabeledPrice(label='label', amount=100000)],
        photo_url='https://i.postimg.cc/nzCRrbwD/bracelet.png'
    )


async def get_more(message: Message, dialog_manager: DialogManager):
    await message.reply(
        """ü§î <b>–ß—Ç–æ —Ç–∞–∫–æ–µ HUSTLER BRACELET?</b>

<b>üìû –ì—Ä—É–ø–ø–æ–≤—ã–µ —Å–æ–∑–≤–æ–Ω—ã</b>: –ó–æ–≤–µ–º –≥–æ—Å—Ç–µ–π –∏–∑ —Å–∞–º—ã—Ö —Ä–∞–∑–Ω—ã—Ö –Ω–∏—à –∏ –ø–µ—Ä–µ–Ω–∏–º–∞–µ–º –∏—Ö –æ–ø—ã—Ç, –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω–æ —Ä–∞–∑–±–∏—Ä–∞–µ–º –∫–∞–∂–¥–æ–≥–æ —É—á–∞—Å—Ç–Ω–∏–∫–∞

<b>üí∞ –ö—Ä–∏–ø—Ç–∞</b>: –ú–æ–∏ —Å–¥–µ–ª–∫–∏ –Ω–∞ —Ä—ã–Ω–∫–µ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –∏ –¥–µ—Ç–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ–µ–∫—Ç–æ–≤ 

<b>üë• –ö–æ–Ω–Ω–µ–∫—Ç—ã</b>: –î–∞–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Ä–µ–±—è—Ç–∞–º –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–æ–≤–∞—Ç—å –¥—Ä—É–≥ —Å –¥—Ä—É–≥–æ–º, —Å–æ–∑–¥–∞–≤–∞—Ç—å —Å–æ–≤–º–µ—Å—Ç–Ω—ã–µ –ø—Ä–æ–µ–∫—Ç—ã –∏ —Ä–∞–∑–≤–∏–≤–∞—Ç—å—Å—è

<b>üìù –°—Ç–∞—Ç—å–∏</b>: –û–±—É—á–∞—é—â–∏–µ —Å—Ç–∞—Ç—å–∏ –Ω–∞ —Å–∞–º—ã–µ —Ä–∞–∑–Ω—ã–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –Ω–∏—à–∏ 

<b>üí™ –°–ø–æ—Ä—Ç</b>: –ü—Ä–æ–≥—Ä–∞–º–º—ã —Ç—Ä–µ–Ω–∏—Ä–æ–≤–æ–∫, –∫–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏–∏ –æ—Ç –ø—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω–æ–≥–æ —Ç—Ä–µ–Ω–µ—Ä–∞ –∏ –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ –∑–¥–æ—Ä–æ–≤—å—é. 

<b>‚úÖ –ë–æ—Ç HUSTLER HELPER</b>: –ü–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∏ —Å–∏—Å—Ç–µ–º–∞—Ç–∏–∑–∞—Ü–∏—è —Ç–≤–æ–∏—Ö –¥–≤–∏–∂–µ–Ω–∏–π, –∫–∞–ª—å–∫—É–ª—è—Ç–æ—Ä —Ñ–∏–Ω–∞–Ω—Å–æ–≤ –∏ –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–µ –¥–µ–Ω–µ–∂–Ω—ã–µ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏""",
        reply_markup=InlineKeyboardMarkup(
            inline_keyboard=[
                [InlineKeyboardButton(text='–ü–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ (1000‚ÇΩ)', callback_data='amogus')]
            ]
        )
    )


async def on_unknown_intent(event: ErrorEvent, dialog_manager: DialogManager):
    # Example of handling UnknownIntent Error and starting new dialog.
    logging.error("Restarting dialog: %s", event.exception)
    if event.update.callback_query:
        await event.update.callback_query.answer(
            "–ë–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç.\n"
            "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
        )
        if event.update.callback_query.message:
            try:
                await event.update.callback_query.message.delete()
            except TelegramBadRequest:
                pass  # whatever
    elif event.update.message:
        await event.update.message.answer(
            "–ë–æ—Ç –±—ã–ª –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –∏–∑-–∑–∞ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏—Ö —Ä–∞–±–æ—Ç.\n"
            "–ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é.",
            reply_markup=ReplyKeyboardRemove(),
        )
    await dialog_manager.start(
        states.Main.MAIN,
        mode=StartMode.RESET_STACK,
        show_mode=ShowMode.SEND,
    )


# TODO: –°–¥–µ–ª–∞—Ç—å —Ö–µ–Ω–¥–ª–∏–Ω–≥ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –æ—à–∏–±–æ–∫


dialog_router = Router()

# dialog_router.include_routers(
#     # ...
# )


def setup_dp():
    storage = MemoryStorage()
    dp = Dispatcher(storage=storage)

    dp.message.register(start, F.text == "/start")
    dp.message.register(get_more, F.text == "/info")
    dp.errors.register(
        on_unknown_intent,
        ExceptionTypeFilter(UnknownIntent),
    )

    # dp.message.middleware.register(database_middleware)
    # dp.callback_query.middleware.register(database_middleware)
    # dp.errors.middleware.register(database_middleware)
    #
    # dp.message.filter(SubChecker())

    dp.include_router(dialog_router)

    setup_dialogs(dp)

    return dp


async def main():
    # real main
    logging.basicConfig(level=logging.INFO)
    bot = Bot(token=config.TG_BOT_TOKEN, parse_mode=ParseMode.HTML, disable_web_page_preview=True)

    async def process_pre_checkout_query(pre_checkout_query: types.PreCheckoutQuery):
        await bot.answer_pre_checkout_query(pre_checkout_query.id, ok=True)

    async def process_successful_payment(message: types.Message):
        print('successful_payment')
        await bot.send_message(
            message.chat.id,
            f'–ü–∞—Å–∏–±–∞ –∑–∞ –±–∞–±–∫–∏, –ø–æ–±—Ä–∏–ª –∫–∞–∫ —Ö–æ–º—è–∫–∞'
        )

    dp = setup_dp()

    dp.pre_checkout_query.register(process_pre_checkout_query)
    dp.message.register(process_successful_payment, F.successful_payment)

    # aiogram_dialog.widgets.text.jinja.default_env = setup_jinja(dp, filters=get_jinja_filters())

    await dp.start_polling(bot)


if __name__ == '__main__':
    asyncio.run(main())
